//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using LGBS.MVPFramework.Data;


[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("CarsDb.Data", "CityCountry", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.City), "Country", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CarsApp.Data.Country), true)]
[assembly: EdmRelationshipAttribute("CarsDb.Data", "FactoryCity", "Factory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.Factory), "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CarsApp.Data.City), true)]
[assembly: EdmRelationshipAttribute("CarsDb.Data", "CarProductCarModel", "CarProduct", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.CarProduct), "CarModel", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CarsApp.Data.CarModel), true)]
[assembly: EdmRelationshipAttribute("CarsDb.Data", "CarProductFactory", "CarProduct", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.CarProduct), "Factory", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CarsApp.Data.Factory), true)]
[assembly: EdmRelationshipAttribute("CarsDb.Data", "CarProductCarFeature", "CarProduct", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.CarProduct), "CarFeature", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.CarFeature))]
[assembly: EdmRelationshipAttribute("CarsDb.Data", "CarFeatureCarModel", "CarFeature", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.CarFeature), "CarModel", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.CarModel))]
[assembly: EdmRelationshipAttribute("CarsDb.Data", "ManufactureCountry", "Manufacture", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.Manufacture), "Country", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CarsApp.Data.Country), true)]
[assembly: EdmRelationshipAttribute("CarsDb.Data", "FactoryManufacture", "Factory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.Factory), "Manufacture", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CarsApp.Data.Manufacture), true)]
[assembly: EdmRelationshipAttribute("CarsDb.Data", "CarModelManufacture", "CarModel", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.CarModel), "Manufacture", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CarsApp.Data.Manufacture), true)]
[assembly: EdmRelationshipAttribute("CarsDb.Data", "HandledCarProductCarProduct", "CarProduct", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CarsApp.Data.CarProduct), "HandledCarProduct", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.HandledCarProduct), true)]
[assembly: EdmRelationshipAttribute("CarsDb.Data", "CarServiceCity", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CarsApp.Data.City), "CarService", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.CarService), true)]
[assembly: EdmRelationshipAttribute("CarsDb.Data", "HandledCarProductCarService", "CarService", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(CarsApp.Data.CarService), "HandledCarProduct", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(CarsApp.Data.HandledCarProduct), true)]

#endregion

namespace CarsApp.Data
{
    #region Contexts

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class CarsDb : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initializes a new CarsDb object using the connection string found in the 'CarsDb' section of the application configuration file.
        /// </summary>
        public CarsDb() : base("name=CarsDb", "CarsDb")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new CarsDb object.
        /// </summary>
        public CarsDb(string connectionString) : base(connectionString, "CarsDb")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new CarsDb object.
        /// </summary>
        public CarsDb(EntityConnection connection) : base(connection, "CarsDb")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Country> Countries
        {
            get
            {
                if ((_Countries == null))
                {
                    _Countries = base.CreateObjectSet<Country>("Countries");
                }
                return _Countries;
            }
        }
        private ObjectSet<Country> _Countries;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<City> Cities
        {
            get
            {
                if ((_Cities == null))
                {
                    _Cities = base.CreateObjectSet<City>("Cities");
                }
                return _Cities;
            }
        }
        private ObjectSet<City> _Cities;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Factory> Factories
        {
            get
            {
                if ((_Factories == null))
                {
                    _Factories = base.CreateObjectSet<Factory>("Factories");
                }
                return _Factories;
            }
        }
        private ObjectSet<Factory> _Factories;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CarModel> CarModels
        {
            get
            {
                if ((_CarModels == null))
                {
                    _CarModels = base.CreateObjectSet<CarModel>("CarModels");
                }
                return _CarModels;
            }
        }
        private ObjectSet<CarModel> _CarModels;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CarProduct> CarProducts
        {
            get
            {
                if ((_CarProducts == null))
                {
                    _CarProducts = base.CreateObjectSet<CarProduct>("CarProducts");
                }
                return _CarProducts;
            }
        }
        private ObjectSet<CarProduct> _CarProducts;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CarFeature> CarFeatures
        {
            get
            {
                if ((_CarFeatures == null))
                {
                    _CarFeatures = base.CreateObjectSet<CarFeature>("CarFeatures");
                }
                return _CarFeatures;
            }
        }
        private ObjectSet<CarFeature> _CarFeatures;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Manufacture> Manufactures
        {
            get
            {
                if ((_Manufactures == null))
                {
                    _Manufactures = base.CreateObjectSet<Manufacture>("Manufactures");
                }
                return _Manufactures;
            }
        }
        private ObjectSet<Manufacture> _Manufactures;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CarService> CarServices
        {
            get
            {
                if ((_CarServices == null))
                {
                    _CarServices = base.CreateObjectSet<CarService>("CarServices");
                }
                return _CarServices;
            }
        }
        private ObjectSet<CarService> _CarServices;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HandledCarProduct> HandledCarProducts
        {
            get
            {
                if ((_HandledCarProducts == null))
                {
                    _HandledCarProducts = base.CreateObjectSet<HandledCarProduct>("HandledCarProducts");
                }
                return _HandledCarProducts;
            }
        }
        private ObjectSet<HandledCarProduct> _HandledCarProducts;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CarServicesView> CarServicesViews
        {
            get
            {
                if ((_CarServicesViews == null))
                {
                    _CarServicesViews = base.CreateObjectSet<CarServicesView>("CarServicesViews");
                }
                return _CarServicesViews;
            }
        }
        private ObjectSet<CarServicesView> _CarServicesViews;

        #endregion

        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the Countries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCountries(Country country)
        {
            base.AddObject("Countries", country);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Cities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCities(City city)
        {
            base.AddObject("Cities", city);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Factories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFactories(Factory factory)
        {
            base.AddObject("Factories", factory);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the CarModels EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCarModels(CarModel carModel)
        {
            base.AddObject("CarModels", carModel);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the CarProducts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCarProducts(CarProduct carProduct)
        {
            base.AddObject("CarProducts", carProduct);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the CarFeatures EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCarFeatures(CarFeature carFeature)
        {
            base.AddObject("CarFeatures", carFeature);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Manufactures EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToManufactures(Manufacture manufacture)
        {
            base.AddObject("Manufactures", manufacture);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the CarServices EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCarServices(CarService carService)
        {
            base.AddObject("CarServices", carService);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the HandledCarProducts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHandledCarProducts(HandledCarProduct handledCarProduct)
        {
            base.AddObject("HandledCarProducts", handledCarProduct);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the CarServicesViews EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCarServicesViews(CarServicesView carServicesView)
        {
            base.AddObject("CarServicesViews", carServicesView);
        }

        #endregion

        #region Function Imports

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="carServiceId">No Metadata Documentation available.</param>
        /// <param name="carProductId">No Metadata Documentation available.</param>
        public int FixCarProduct(Nullable<global::System.Int64> carServiceId, Nullable<global::System.Int64> carProductId)
        {
            ObjectParameter carServiceIdParameter;
            if (carServiceId.HasValue)
            {
                carServiceIdParameter = new ObjectParameter("CarServiceId", carServiceId);
            }
            else
            {
                carServiceIdParameter = new ObjectParameter("CarServiceId", typeof(global::System.Int64));
            }

            ObjectParameter carProductIdParameter;
            if (carProductId.HasValue)
            {
                carProductIdParameter = new ObjectParameter("CarProductId", carProductId);
            }
            else
            {
                carProductIdParameter = new ObjectParameter("CarProductId", typeof(global::System.Int64));
            }

            return base.ExecuteFunction("FixCarProduct", carServiceIdParameter, carProductIdParameter);
        }

        #endregion
    }

    #endregion

    #region Entities

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "CarsDb.Data", Name = "CarFeature")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class CarFeature : EntityObject, IEntityObjectWithId, IExtendedObject<CarFeature>
    {

        #region IExtendedObject Methods

        /// <summary>
        /// Czy obiekt jest pusty (Id = -1).
        /// </summary>
        public bool IsEmptyObject
        {
            get { return Id == -1; }
        }

        /// <summary>
        /// Tworzy pusty obiekt (Id = -1).
        /// </summary>
        /// <returns></returns>
        public virtual CarFeature CreateEmptyObject()
        {
            return new CarFeature { Id = -1 };
        }

        #endregion

        #region Factory Method

        /// <summary>
        /// Create a new CarFeature object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="code">Initial value of the Code property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static CarFeature CreateCarFeature(global::System.Int64 id, global::System.String code, global::System.String name)
        {
            CarFeature carFeature = new CarFeature();
            carFeature.Id = id;
            carFeature.Code = code;
            carFeature.Name = name;
            return carFeature;
        }

        #endregion

        #region Simple Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CarProductCarFeature", "CarProduct")]
        public EntityCollection<CarProduct> CarProducts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CarProduct>("CarsDb.Data.CarProductCarFeature", "CarProduct");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CarProduct>("CarsDb.Data.CarProductCarFeature", "CarProduct", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CarFeatureCarModel", "CarModel")]
        public EntityCollection<CarModel> CarModels
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CarModel>("CarsDb.Data.CarFeatureCarModel", "CarModel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CarModel>("CarsDb.Data.CarFeatureCarModel", "CarModel", value);
                }
            }
        }

        #endregion

    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "CarsDb.Data", Name = "CarModel")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class CarModel : EntityObject, IEntityObjectWithId, IExtendedObject<CarModel>
    {

        #region IExtendedObject Methods

        /// <summary>
        /// Czy obiekt jest pusty (Id = -1).
        /// </summary>
        public bool IsEmptyObject
        {
            get { return Id == -1; }
        }

        /// <summary>
        /// Tworzy pusty obiekt (Id = -1).
        /// </summary>
        /// <returns></returns>
        public virtual CarModel CreateEmptyObject()
        {
            return new CarModel { Id = -1 };
        }

        #endregion

        #region Factory Method

        /// <summary>
        /// Create a new CarModel object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="manufactureId">Initial value of the ManufactureId property.</param>
        public static CarModel CreateCarModel(global::System.Int64 id, global::System.String name, global::System.Int64 manufactureId)
        {
            CarModel carModel = new CarModel();
            carModel.Id = id;
            carModel.Name = name;
            carModel.ManufactureId = manufactureId;
            return carModel;
        }

        #endregion

        #region Simple Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 ManufactureId
        {
            get
            {
                return _ManufactureId;
            }
            set
            {
                OnManufactureIdChanging(value);
                ReportPropertyChanging("ManufactureId");
                _ManufactureId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ManufactureId");
                OnManufactureIdChanged();
            }
        }
        private global::System.Int64 _ManufactureId;
        partial void OnManufactureIdChanging(global::System.Int64 value);
        partial void OnManufactureIdChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CarProductCarModel", "CarProduct")]
        public EntityCollection<CarProduct> CarProducts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CarProduct>("CarsDb.Data.CarProductCarModel", "CarProduct");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CarProduct>("CarsDb.Data.CarProductCarModel", "CarProduct", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CarFeatureCarModel", "CarFeature")]
        public EntityCollection<CarFeature> CarFeatures
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CarFeature>("CarsDb.Data.CarFeatureCarModel", "CarFeature");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CarFeature>("CarsDb.Data.CarFeatureCarModel", "CarFeature", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CarModelManufacture", "Manufacture")]
        public Manufacture Manufacture
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Manufacture>("CarsDb.Data.CarModelManufacture", "Manufacture").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Manufacture>("CarsDb.Data.CarModelManufacture", "Manufacture").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Manufacture> ManufactureReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Manufacture>("CarsDb.Data.CarModelManufacture", "Manufacture");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Manufacture>("CarsDb.Data.CarModelManufacture", "Manufacture", value);
                }
            }
        }

        #endregion

    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "CarsDb.Data", Name = "CarProduct")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class CarProduct : EntityObject, IEntityObjectWithId, IExtendedObject<CarProduct>
    {

        #region IExtendedObject Methods

        /// <summary>
        /// Czy obiekt jest pusty (Id = -1).
        /// </summary>
        public bool IsEmptyObject
        {
            get { return Id == -1; }
        }

        /// <summary>
        /// Tworzy pusty obiekt (Id = -1).
        /// </summary>
        /// <returns></returns>
        public virtual CarProduct CreateEmptyObject()
        {
            return new CarProduct { Id = -1 };
        }

        #endregion

        #region Factory Method

        /// <summary>
        /// Create a new CarProduct object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="year">Initial value of the Year property.</param>
        /// <param name="vIN">Initial value of the VIN property.</param>
        /// <param name="carModelId">Initial value of the CarModelId property.</param>
        /// <param name="factoryId">Initial value of the FactoryId property.</param>
        public static CarProduct CreateCarProduct(global::System.Int64 id, global::System.Int16 year, global::System.String vIN, global::System.Int64 carModelId, global::System.Int64 factoryId)
        {
            CarProduct carProduct = new CarProduct();
            carProduct.Id = id;
            carProduct.Year = year;
            carProduct.VIN = vIN;
            carProduct.CarModelId = carModelId;
            carProduct.FactoryId = factoryId;
            return carProduct;
        }

        #endregion

        #region Simple Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int16 Year
        {
            get
            {
                return _Year;
            }
            set
            {
                OnYearChanging(value);
                ReportPropertyChanging("Year");
                _Year = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Year");
                OnYearChanged();
            }
        }
        private global::System.Int16 _Year;
        partial void OnYearChanging(global::System.Int16 value);
        partial void OnYearChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String VIN
        {
            get
            {
                return _VIN;
            }
            set
            {
                OnVINChanging(value);
                ReportPropertyChanging("VIN");
                _VIN = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("VIN");
                OnVINChanged();
            }
        }
        private global::System.String _VIN;
        partial void OnVINChanging(global::System.String value);
        partial void OnVINChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 CarModelId
        {
            get
            {
                return _CarModelId;
            }
            set
            {
                OnCarModelIdChanging(value);
                ReportPropertyChanging("CarModelId");
                _CarModelId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CarModelId");
                OnCarModelIdChanged();
            }
        }
        private global::System.Int64 _CarModelId;
        partial void OnCarModelIdChanging(global::System.Int64 value);
        partial void OnCarModelIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 FactoryId
        {
            get
            {
                return _FactoryId;
            }
            set
            {
                OnFactoryIdChanging(value);
                ReportPropertyChanging("FactoryId");
                _FactoryId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FactoryId");
                OnFactoryIdChanged();
            }
        }
        private global::System.Int64 _FactoryId;
        partial void OnFactoryIdChanging(global::System.Int64 value);
        partial void OnFactoryIdChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CarProductCarModel", "CarModel")]
        public CarModel CarModel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarModel>("CarsDb.Data.CarProductCarModel", "CarModel").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarModel>("CarsDb.Data.CarProductCarModel", "CarModel").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CarModel> CarModelReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarModel>("CarsDb.Data.CarProductCarModel", "CarModel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CarModel>("CarsDb.Data.CarProductCarModel", "CarModel", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CarProductFactory", "Factory")]
        public Factory Factory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Factory>("CarsDb.Data.CarProductFactory", "Factory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Factory>("CarsDb.Data.CarProductFactory", "Factory").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Factory> FactoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Factory>("CarsDb.Data.CarProductFactory", "Factory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Factory>("CarsDb.Data.CarProductFactory", "Factory", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CarProductCarFeature", "CarFeature")]
        public EntityCollection<CarFeature> CarFeatures
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CarFeature>("CarsDb.Data.CarProductCarFeature", "CarFeature");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CarFeature>("CarsDb.Data.CarProductCarFeature", "CarFeature", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "HandledCarProductCarProduct", "HandledCarProduct")]
        public EntityCollection<HandledCarProduct> HandledCarProducts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HandledCarProduct>("CarsDb.Data.HandledCarProductCarProduct", "HandledCarProduct");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HandledCarProduct>("CarsDb.Data.HandledCarProductCarProduct", "HandledCarProduct", value);
                }
            }
        }

        #endregion

    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "CarsDb.Data", Name = "CarService")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class CarService : EntityObject, IEntityObjectWithId, IExtendedObject<CarService>
    {

        #region IExtendedObject Methods

        /// <summary>
        /// Czy obiekt jest pusty (Id = -1).
        /// </summary>
        public bool IsEmptyObject
        {
            get { return Id == -1; }
        }

        /// <summary>
        /// Tworzy pusty obiekt (Id = -1).
        /// </summary>
        /// <returns></returns>
        public virtual CarService CreateEmptyObject()
        {
            return new CarService { Id = -1 };
        }

        #endregion

        #region Factory Method

        /// <summary>
        /// Create a new CarService object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="street">Initial value of the Street property.</param>
        /// <param name="cityId">Initial value of the CityId property.</param>
        /// <param name="postCode">Initial value of the PostCode property.</param>
        public static CarService CreateCarService(global::System.Int64 id, global::System.String name, global::System.String street, global::System.Int64 cityId, global::System.String postCode)
        {
            CarService carService = new CarService();
            carService.Id = id;
            carService.Name = name;
            carService.Street = street;
            carService.CityId = cityId;
            carService.PostCode = postCode;
            return carService;
        }

        #endregion

        #region Simple Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Street
        {
            get
            {
                return _Street;
            }
            set
            {
                OnStreetChanging(value);
                ReportPropertyChanging("Street");
                _Street = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Street");
                OnStreetChanged();
            }
        }
        private global::System.String _Street;
        partial void OnStreetChanging(global::System.String value);
        partial void OnStreetChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 CityId
        {
            get
            {
                return _CityId;
            }
            set
            {
                OnCityIdChanging(value);
                ReportPropertyChanging("CityId");
                _CityId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CityId");
                OnCityIdChanged();
            }
        }
        private global::System.Int64 _CityId;
        partial void OnCityIdChanging(global::System.Int64 value);
        partial void OnCityIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String PostCode
        {
            get
            {
                return _PostCode;
            }
            set
            {
                OnPostCodeChanging(value);
                ReportPropertyChanging("PostCode");
                _PostCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PostCode");
                OnPostCodeChanged();
            }
        }
        private global::System.String _PostCode;
        partial void OnPostCodeChanging(global::System.String value);
        partial void OnPostCodeChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CarServiceCity", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("CarsDb.Data.CarServiceCity", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("CarsDb.Data.CarServiceCity", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("CarsDb.Data.CarServiceCity", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("CarsDb.Data.CarServiceCity", "City", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "HandledCarProductCarService", "HandledCarProduct")]
        public EntityCollection<HandledCarProduct> HandledCarProducts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HandledCarProduct>("CarsDb.Data.HandledCarProductCarService", "HandledCarProduct");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HandledCarProduct>("CarsDb.Data.HandledCarProductCarService", "HandledCarProduct", value);
                }
            }
        }

        #endregion

    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "CarsDb.Data", Name = "CarServicesView")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class CarServicesView : EntityObject, IObjectWithId
    {

        #region IExtendedObject Methods

        public long Id => -1;
        #endregion

        #region Factory Method

        /// <summary>
        /// Create a new CarServicesView object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        public static CarServicesView CreateCarServicesView(global::System.String name, global::System.Int32 NumberOfServicedCars)
        {
            CarServicesView carServicesView = new CarServicesView();
            carServicesView.NumberOfServicedCars = NumberOfServicedCars;
            carServicesView.Name = name;
            return carServicesView;
        }

        #endregion


        #region Simple Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int32 NumberOfServicedCars
        {
            get
            {
                return _NumberOfServicedCars;
            }
            set
            {
                OnNumberOfServicedCarsChanging(value);
                ReportPropertyChanging("NumberOfServicedCars");
                _NumberOfServicedCars = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NumberOfServicedCars");
                OnNumberOfServicedCarsChanged();
            }
        }


        private global::System.Int32 _NumberOfServicedCars;
        partial void OnNumberOfServicedCarsChanging(global::System.Int32 value);
        partial void OnNumberOfServicedCarsChanged();

        #endregion

    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "CarsDb.Data", Name = "City")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class City : EntityObject, IEntityObjectWithId, IExtendedObject<City>
    {

        #region IExtendedObject Methods

        /// <summary>
        /// Czy obiekt jest pusty (Id = -1).
        /// </summary>
        public bool IsEmptyObject
        {
            get { return Id == -1; }
        }

        /// <summary>
        /// Tworzy pusty obiekt (Id = -1).
        /// </summary>
        /// <returns></returns>
        public virtual City CreateEmptyObject()
        {
            return new City { Id = -1 };
        }

        #endregion

        #region Factory Method

        /// <summary>
        /// Create a new City object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="countryId">Initial value of the CountryId property.</param>
        public static City CreateCity(global::System.Int64 id, global::System.String name, global::System.Int64 countryId)
        {
            City city = new City();
            city.Id = id;
            city.Name = name;
            city.CountryId = countryId;
            return city;
        }

        #endregion

        #region Simple Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 CountryId
        {
            get
            {
                return _CountryId;
            }
            set
            {
                OnCountryIdChanging(value);
                ReportPropertyChanging("CountryId");
                _CountryId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CountryId");
                OnCountryIdChanged();
            }
        }
        private global::System.Int64 _CountryId;
        partial void OnCountryIdChanging(global::System.Int64 value);
        partial void OnCountryIdChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CityCountry", "Country")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("CarsDb.Data.CityCountry", "Country").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("CarsDb.Data.CityCountry", "Country").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("CarsDb.Data.CityCountry", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("CarsDb.Data.CityCountry", "Country", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "FactoryCity", "Factory")]
        public EntityCollection<Factory> Factories
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Factory>("CarsDb.Data.FactoryCity", "Factory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Factory>("CarsDb.Data.FactoryCity", "Factory", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CarServiceCity", "CarService")]
        public EntityCollection<CarService> CarServices
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CarService>("CarsDb.Data.CarServiceCity", "CarService");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CarService>("CarsDb.Data.CarServiceCity", "CarService", value);
                }
            }
        }

        #endregion

    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "CarsDb.Data", Name = "Country")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class Country : EntityObject, IEntityObjectWithId, IExtendedObject<Country>
    {

        #region IExtendedObject Methods

        /// <summary>
        /// Czy obiekt jest pusty (Id = -1).
        /// </summary>
        public bool IsEmptyObject
        {
            get { return Id == -1; }
        }

        /// <summary>
        /// Tworzy pusty obiekt (Id = -1).
        /// </summary>
        /// <returns></returns>
        public virtual Country CreateEmptyObject()
        {
            return new Country { Id = -1 };
        }

        #endregion

        #region Factory Method

        /// <summary>
        /// Create a new Country object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="code">Initial value of the Code property.</param>
        public static Country CreateCountry(global::System.Int64 id, global::System.String name, global::System.String code)
        {
            Country country = new Country();
            country.Id = id;
            country.Name = name;
            country.Code = code;
            return country;
        }

        #endregion

        #region Simple Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CityCountry", "City")]
        public EntityCollection<City> Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<City>("CarsDb.Data.CityCountry", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<City>("CarsDb.Data.CityCountry", "City", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "ManufactureCountry", "Manufacture")]
        public EntityCollection<Manufacture> Manufactures
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Manufacture>("CarsDb.Data.ManufactureCountry", "Manufacture");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Manufacture>("CarsDb.Data.ManufactureCountry", "Manufacture", value);
                }
            }
        }

        #endregion

    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "CarsDb.Data", Name = "Factory")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class Factory : EntityObject, IEntityObjectWithId, IExtendedObject<Factory>
    {

        #region IExtendedObject Methods

        /// <summary>
        /// Czy obiekt jest pusty (Id = -1).
        /// </summary>
        public bool IsEmptyObject
        {
            get { return Id == -1; }
        }

        /// <summary>
        /// Tworzy pusty obiekt (Id = -1).
        /// </summary>
        /// <returns></returns>
        public virtual Factory CreateEmptyObject()
        {
            return new Factory { Id = -1 };
        }

        #endregion

        #region Factory Method

        /// <summary>
        /// Create a new Factory object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="cityId">Initial value of the CityId property.</param>
        /// <param name="manufactureId">Initial value of the ManufactureId property.</param>
        public static Factory CreateFactory(global::System.Int64 id, global::System.String name, global::System.Int64 cityId, global::System.Int64 manufactureId)
        {
            Factory factory = new Factory();
            factory.Id = id;
            factory.Name = name;
            factory.CityId = cityId;
            factory.ManufactureId = manufactureId;
            return factory;
        }

        #endregion

        #region Simple Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 CityId
        {
            get
            {
                return _CityId;
            }
            set
            {
                OnCityIdChanging(value);
                ReportPropertyChanging("CityId");
                _CityId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CityId");
                OnCityIdChanged();
            }
        }
        private global::System.Int64 _CityId;
        partial void OnCityIdChanging(global::System.Int64 value);
        partial void OnCityIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 ManufactureId
        {
            get
            {
                return _ManufactureId;
            }
            set
            {
                OnManufactureIdChanging(value);
                ReportPropertyChanging("ManufactureId");
                _ManufactureId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ManufactureId");
                OnManufactureIdChanged();
            }
        }
        private global::System.Int64 _ManufactureId;
        partial void OnManufactureIdChanging(global::System.Int64 value);
        partial void OnManufactureIdChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "FactoryCity", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("CarsDb.Data.FactoryCity", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("CarsDb.Data.FactoryCity", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("CarsDb.Data.FactoryCity", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("CarsDb.Data.FactoryCity", "City", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CarProductFactory", "CarProduct")]
        public EntityCollection<CarProduct> CarProducts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CarProduct>("CarsDb.Data.CarProductFactory", "CarProduct");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CarProduct>("CarsDb.Data.CarProductFactory", "CarProduct", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "FactoryManufacture", "Manufacture")]
        public Manufacture Manufacture
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Manufacture>("CarsDb.Data.FactoryManufacture", "Manufacture").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Manufacture>("CarsDb.Data.FactoryManufacture", "Manufacture").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Manufacture> ManufactureReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Manufacture>("CarsDb.Data.FactoryManufacture", "Manufacture");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Manufacture>("CarsDb.Data.FactoryManufacture", "Manufacture", value);
                }
            }
        }

        #endregion

    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "CarsDb.Data", Name = "HandledCarProduct")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class HandledCarProduct : EntityObject, IEntityObjectWithId, IExtendedObject<HandledCarProduct>
    {

        #region IExtendedObject Methods

        /// <summary>
        /// Czy obiekt jest pusty (Id = -1).
        /// </summary>
        public bool IsEmptyObject
        {
            get { return CarServiceId == -1; }
        }

        /// <summary>
        /// Tworzy pusty obiekt (Id = -1).
        /// </summary>
        /// <returns></returns>
        public virtual HandledCarProduct CreateEmptyObject()
        {
            return new HandledCarProduct { CarServiceId = -1 };
        }

        #endregion

        #region Factory Method

        /// <summary>
        /// Create a new HandledCarProduct object.
        /// </summary>
        /// <param name="carServiceId">Initial value of the CarServiceId property.</param>
        /// <param name="carProductId">Initial value of the CarProductId property.</param>
        /// <param name="handleDate">Initial value of the HandleDate property.</param>
        /// <param name="isFixed">Initial value of the IsFixed property.</param>
        /// <param name="fixDate">Initial value of the FixDate property.</param>
        public static HandledCarProduct CreateHandledCarProduct(global::System.Int64 carServiceId, global::System.Int64 carProductId, global::System.DateTime handleDate, global::System.Boolean isFixed, global::System.DateTime fixDate)
        {
            HandledCarProduct handledCarProduct = new HandledCarProduct();
            handledCarProduct.CarServiceId = carServiceId;
            handledCarProduct.CarProductId = carProductId;
            handledCarProduct.HandleDate = handleDate;
            handledCarProduct.IsFixed = isFixed;
            handledCarProduct.FixDate = fixDate;
            return handledCarProduct;
        }

        #endregion

        #region Simple Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 CarServiceId
        {
            get
            {
                return _CarServiceId;
            }
            set
            {
                if (_CarServiceId != value)
                {
                    OnCarServiceIdChanging(value);
                    ReportPropertyChanging("CarServiceId");
                    _CarServiceId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CarServiceId");
                    OnCarServiceIdChanged();
                }
            }
        }
        private global::System.Int64 _CarServiceId;
        partial void OnCarServiceIdChanging(global::System.Int64 value);
        partial void OnCarServiceIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 CarProductId
        {
            get
            {
                return _CarProductId;
            }
            set
            {
                if (_CarProductId != value)
                {
                    OnCarProductIdChanging(value);
                    ReportPropertyChanging("CarProductId");
                    _CarProductId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CarProductId");
                    OnCarProductIdChanged();
                }
            }
        }
        private global::System.Int64 _CarProductId;
        partial void OnCarProductIdChanging(global::System.Int64 value);
        partial void OnCarProductIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.DateTime HandleDate
        {
            get
            {
                return _HandleDate;
            }
            set
            {
                OnHandleDateChanging(value);
                ReportPropertyChanging("HandleDate");
                _HandleDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HandleDate");
                OnHandleDateChanged();
            }
        }
        private global::System.DateTime _HandleDate;
        partial void OnHandleDateChanging(global::System.DateTime value);
        partial void OnHandleDateChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsFixed
        {
            get
            {
                return _IsFixed;
            }
            set
            {
                OnIsFixedChanging(value);
                ReportPropertyChanging("IsFixed");
                _IsFixed = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsFixed");
                OnIsFixedChanged();
            }
        }
        private global::System.Boolean _IsFixed;
        partial void OnIsFixedChanging(global::System.Boolean value);
        partial void OnIsFixedChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.DateTime FixDate
        {
            get
            {
                return _FixDate;
            }
            set
            {
                OnFixDateChanging(value);
                ReportPropertyChanging("FixDate");
                _FixDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FixDate");
                OnFixDateChanged();
            }
        }
        private global::System.DateTime _FixDate;
        partial void OnFixDateChanging(global::System.DateTime value);
        partial void OnFixDateChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "HandledCarProductCarProduct", "CarProduct")]
        public CarProduct CarProduct
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarProduct>("CarsDb.Data.HandledCarProductCarProduct", "CarProduct").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarProduct>("CarsDb.Data.HandledCarProductCarProduct", "CarProduct").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CarProduct> CarProductReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarProduct>("CarsDb.Data.HandledCarProductCarProduct", "CarProduct");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CarProduct>("CarsDb.Data.HandledCarProductCarProduct", "CarProduct", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "HandledCarProductCarService", "CarService")]
        public CarService CarService
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarService>("CarsDb.Data.HandledCarProductCarService", "CarService").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarService>("CarsDb.Data.HandledCarProductCarService", "CarService").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CarService> CarServiceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CarService>("CarsDb.Data.HandledCarProductCarService", "CarService");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CarService>("CarsDb.Data.HandledCarProductCarService", "CarService", value);
                }
            }
        }

        public long Id => ((IObjectWithId)CarProduct).Id;

        #endregion

    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName = "CarsDb.Data", Name = "Manufacture")]
    [Serializable()]
    [DataContractAttribute(IsReference = true)]
    public partial class Manufacture : EntityObject, IEntityObjectWithId, IExtendedObject<Manufacture>
    {

        #region IExtendedObject Methods

        /// <summary>
        /// Czy obiekt jest pusty (Id = -1).
        /// </summary>
        public bool IsEmptyObject
        {
            get { return Id == -1; }
        }

        /// <summary>
        /// Tworzy pusty obiekt (Id = -1).
        /// </summary>
        /// <returns></returns>
        public virtual Manufacture CreateEmptyObject()
        {
            return new Manufacture { Id = -1 };
        }

        #endregion

        #region Factory Method

        /// <summary>
        /// Create a new Manufacture object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="countryId">Initial value of the CountryId property.</param>
        public static Manufacture CreateManufacture(global::System.Int64 id, global::System.String name, global::System.Int64 countryId)
        {
            Manufacture manufacture = new Manufacture();
            manufacture.Id = id;
            manufacture.Name = name;
            manufacture.CountryId = countryId;
            return manufacture;
        }

        #endregion

        #region Simple Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
        [DataMemberAttribute()]
        public global::System.Int64 CountryId
        {
            get
            {
                return _CountryId;
            }
            set
            {
                OnCountryIdChanging(value);
                ReportPropertyChanging("CountryId");
                _CountryId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CountryId");
                OnCountryIdChanged();
            }
        }
        private global::System.Int64 _CountryId;
        partial void OnCountryIdChanging(global::System.Int64 value);
        partial void OnCountryIdChanged();

        #endregion

        #region Navigation Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "ManufactureCountry", "Country")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("CarsDb.Data.ManufactureCountry", "Country").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("CarsDb.Data.ManufactureCountry", "Country").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("CarsDb.Data.ManufactureCountry", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("CarsDb.Data.ManufactureCountry", "Country", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "FactoryManufacture", "Factory")]
        public EntityCollection<Factory> Factories
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Factory>("CarsDb.Data.FactoryManufacture", "Factory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Factory>("CarsDb.Data.FactoryManufacture", "Factory", value);
                }
            }
        }

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CarsDb.Data", "CarModelManufacture", "CarModel")]
        public EntityCollection<CarModel> CarModels
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CarModel>("CarsDb.Data.CarModelManufacture", "CarModel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CarModel>("CarsDb.Data.CarModelManufacture", "CarModel", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
